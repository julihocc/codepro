{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 \fmodern Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel0 \b \fs36 Curso 1: Programaci\u243?n con Python\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel1 \b \fs32 M\u243?dulo 1: Introducci\u243?n a Python y Variables\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 1.\tx360\tab \u191?Cu\u225?l es la sintaxis correcta para declarar una variable en Python?\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 a) int x = 10;\par}
{\pard \ql \f0 \sa180 \li0 \fi0 b) let x = 10;\par}
{\pard \ql \f0 \sa180 \li0 \fi0 c) var x = 10;\par}
{\pard \ql \f0 \sa180 \li0 \fi0 d) x = 10;\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Correcta: d) x = 10;\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 1.\tx360\tab \u191?C\u243?mo se representa una cadena en Python?\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 a) "cadena"\par}
{\pard \ql \f0 \sa180 \li0 \fi0 b) 'cadena'\par}
{\pard \ql \f0 \sa180 \li0 \fi0 c) Ambas a y b son correctas\par}
{\pard \ql \f0 \sa180 \li0 \fi0 d) Ninguna de las anteriores\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Correcta: c) Ambas a y b son correctas\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 1.\tx360\tab \u191?Cu\u225?l es el valor de verdad de la siguiente expresi\u243?n en Python: not False?\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 a) False\par}
{\pard \ql \f0 \sa180 \li0 \fi0 b) True\par}
{\pard \ql \f0 \sa180 \li0 \fi0 c) None\par}
{\pard \ql \f0 \sa180 \li0 \fi0 d) Error\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Correcta: b) True\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 1.\tx360\tab \u191?C\u243?mo se representa el tipo de dato booleano en Python?\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 a) true / false\par}
{\pard \ql \f0 \sa180 \li0 \fi0 b) True / False\par}
{\pard \ql \f0 \sa180 \li0 \fi0 c) 1 / 0\par}
{\pard \ql \f0 \sa180 \li0 \fi0 d) yes / no\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Correcta: b) True / False\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 1.\tx360\tab \u191?Qu\u233? tipo de datos devuelve la funci\u243?n type() cuando se pasa un n\u250?mero entero como argumento?\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 a) 'int'\par}
{\pard \ql \f0 \sa180 \li0 \fi0 b) 'float'\par}
{\pard \ql \f0 \sa180 \li0 \fi0 c) 'str'\par}
{\pard \ql \f0 \sa180 \li0 \fi0 d) 'bool'\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Correcta: a) 'int'\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel1 \b \fs32 M\u243?dulo 2: Operadores y Estructuras de control\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 1.\tx360\tab \u191?Cu\u225?l es la salida de la siguiente expresi\u243?n en Python: 10 % 3?\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 a) 3\par}
{\pard \ql \f0 \sa180 \li0 \fi0 b) 1\par}
{\pard \ql \f0 \sa180 \li0 \fi0 c) 0\par}
{\pard \ql \f0 \sa180 \li0 \fi0 d) 3.33\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Correcta: b) 1\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 1.\tx360\tab \u191?C\u243?mo se escribe una estructura de control 'if' en Python?\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 a) if (x > 10) \{ print('Grande') \}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 b) if x > 10 -> print('Grande')\par}
{\pard \ql \f0 \sa180 \li0 \fi0 c) if x > 10: print('Grande')\par}
{\pard \ql \f0 \sa180 \li0 \fi0 d) if (x > 10): print('Grande')\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Correcta: c) if x > 10: print('Grande')\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 1.\tx360\tab \u191?Qu\u233? es un bucle 'while' en Python?\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 a) Es una estructura que permite ejecutar un bloque de c\u243?digo varias veces mientras la condici\u243?n sea verdadera.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 b) Es una estructura que permite ejecutar un bloque de c\u243?digo solo si la condici\u243?n es verdadera.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 c) Es una estructura que permite ejecutar un bloque de c\u243?digo solo una vez mientras la condici\u243?n sea verdadera.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 d) Es una estructura que permite ejecutar un bloque de c\u243?digo varias veces hasta que la condici\u243?n se convierta en verdadera.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Correcta: a) Es una estructura que permite ejecutar un bloque de c\u243?digo varias veces mientras la condici\u243?n sea verdadera.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 1.\tx360\tab \u191?C\u243?mo se define una funci\u243?n en Python?\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 a) func miFuncion():\par}
{\pard \ql \f0 \sa180 \li0 \fi0 b) def miFuncion():\par}
{\pard \ql \f0 \sa180 \li0 \fi0 c) function miFuncion():\par}
{\pard \ql \f0 \sa180 \li0 \fi0 d) define miFuncion():\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Correcta: b) def miFuncion():\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 1.\tx360\tab \u191?C\u243?mo se importa un m\u243?dulo en Python?\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 a) import moduleName\par}
{\pard \ql \f0 \sa180 \li0 \fi0 b) #include "moduleName"\par}
{\pard \ql \f0 \sa180 \li0 \fi0 c) using moduleName\par}
{\pard \ql \f0 \sa180 \li0 \fi0 d) import "moduleName"\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Correcta: a) import moduleName\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel1 \b \fs32 M\u243?dulo 3: Ciclos y estructuras lineales\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 1.\tx360\tab \u191?C\u243?mo se itera sobre una lista en Python usando un ciclo {\f1 for}?\par}
{\pard \ql \f0 \sa180 \li360 \fi0 a) for x = 0; x < len(lista); x++\par}
{\pard \ql \f0 \sa180 \li360 \fi0 b) for x in range(len(lista))\par}
{\pard \ql \f0 \sa180 \li360 \fi0 c) for x in lista\par}
{\pard \ql \f0 \sa180 \li360 \fi0 d) for each x in lista\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Correcta: c) for x in lista\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 2.\tx360\tab \u191?Qu\u233? es un generador en Python?\par}
{\pard \ql \f0 \sa180 \li360 \fi0 a) Es un tipo especial de funci\u243?n que produce una secuencia de resultados en lugar de un solo valor.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 b) Es un tipo de ciclo que genera autom\u225?ticamente los elementos de una lista.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 c) Es un tipo de estructura de datos que genera elementos de manera aleatoria.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 d) Es una herramienta para generar n\u250?meros aleatorios.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Correcta: a) Es un tipo especial de funci\u243?n que produce una secuencia de resultados en lugar de un solo valor.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 3.\tx360\tab \u191?C\u243?mo se crea un generador en Python?\par}
{\pard \ql \f0 \sa180 \li360 \fi0 a) def miGenerador: yield x\par}
{\pard \ql \f0 \sa180 \li360 \fi0 b) def miGenerador(): yield x\par}
{\pard \ql \f0 \sa180 \li360 \fi0 c) generator miGenerador(): yield x\par}
{\pard \ql \f0 \sa180 \li360 \fi0 d) def generator miGenerador(): yield x\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Correcta: b) def miGenerador(): yield x\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 4.\tx360\tab \u191?Qu\u233? se debe tener en cuenta al usar un ciclo {\f1 while} en Python?\par}
{\pard \ql \f0 \sa180 \li360 \fi0 a) Que la condici\u243?n del ciclo debe eventualmente llegar a ser falsa, o de lo contrario el ciclo se ejecutar\u225? indefinidamente.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 b) Que la condici\u243?n del ciclo debe ser siempre verdadera.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 c) Que la condici\u243?n del ciclo debe ser siempre falsa.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 d) Ninguna de las anteriores.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Correcta: a) Que la condici\u243?n del ciclo debe eventualmente llegar a ser falsa, o de lo contrario el ciclo se ejecutar\u225? indefinidamente.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 5.\tx360\tab \u191?Cu\u225?l de las siguientes afirmaciones es verdadera sobre las listas en Python?\par}
{\pard \ql \f0 \sa180 \li360 \fi0 a) Las listas son inmutables.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 b) Las listas solo pueden contener elementos de un mismo tipo.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 c) Las listas pueden contener cualquier tipo de datos.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 d) Las listas no pueden contener otras listas.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Correcta: c) Las listas pueden contener cualquier tipo de datos.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel1 \b \fs32 M\u243?dulo 4: Programaci\u243?n orientada a objetos\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 1.\tx360\tab \u191?Qu\u233? es una clase en Python?\par}
{\pard \ql \f0 \sa180 \li360 \fi0 a) Es un prototipo para crear objetos.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 b) Es una funci\u243?n que permite crear objetos.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 c) Es una variable que almacena objetos.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 d) Es un m\u243?dulo que permite trabajar con objetos.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Correcta: a) Es un prototipo para crear objetos.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 2.\tx360\tab \u191?C\u243?mo se crea una instancia de una clase en Python?\par}
{\pard \ql \f0 \sa180 \li360 \fi0 a) instancia = Clase()\par}
{\pard \ql \f0 \sa180 \li360 \fi0 b) instancia = new Clase()\par}
{\pard \ql \f0 \sa180 \li360 \fi0 c) instancia = Clase.create()\par}
{\pard \ql \f0 \sa180 \li360 \fi0 d) instancia = Clase::new()\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Correcta: a) instancia = Clase()\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 3.\tx360\tab \u191?Qu\u233? es la herencia en la programaci\u243?n orientada a objetos en Python?\par}
{\pard \ql \f0 \sa180 \li360 \fi0 a) Es un proceso que permite a una clase adquirir los atributos y m\u233?todos de otra.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 b) Es un proceso que permite a un objeto adquirir las propiedades de otro.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 c) Es un proceso que permite a una clase copiar a otra.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 d) Es un proceso que permite a una clase eliminar atributos y m\u233?todos de otra.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Correcta: a) Es un proceso que permite a una clase adquirir los atributos y m\u233?todos de otra.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 4.\tx360\tab \u191?C\u243?mo se define un m\u233?todo en una clase de Python?\par}
{\pard \ql \f0 \sa180 \li360 \fi0 a) def metodo(self):\par}
{\pard \ql \f0 \sa180 \li360 \fi0 b) method metodo():\par}
{\pard \ql \f0 \sa180 \li360 \fi0 c) function metodo():\par}
{\pard \ql \f0 \sa180 \li360 \fi0 d) def metodo():\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Correcta: a) def metodo(self):\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 5.\tx360\tab \u191?Qu\u233? es el polimorfismo en la programaci\u243?n orientada a objetos en Python?\par}
{\pard \ql \f0 \sa180 \li360 \fi0 a) Es la capacidad de una clase de cambiar su tipo.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 b) Es la capacidad de un objeto de cambiar a otra clase.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 c) Es la capacidad de una variable de tener diferentes formas.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 d) Es la capacidad de una funci\u243?n de comportarse de diferentes maneras dependiendo de los argumentos que recibe.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Correcta: d) Es la capacidad de una funci\u243?n de comportarse de diferentes maneras dependiendo de los argumentos que recibe.\sa180\par}
}
